from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
# from src.api.route_user import api_router as user_router
from src.api.router import api_router  # üëà –æ–±—â–∏–π —Ä–æ—É—Ç–µ—Ä —Å –≤–∫–ª—é—á—ë–Ω–Ω—ã–º–∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏
from pydantic import BaseModel
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import asyncpg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
DATABASE_URL = "postgresql+asyncpg://user:password@localhost/dbname"
engine = create_async_engine(DATABASE_URL, echo=True)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)
Base = declarative_base()

app = FastAPI(title="My App", version="1.0")

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5173"],  # –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ (Vite –æ–±—ã—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 5173)
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è, –ª–æ–≥–∏–Ω, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)
# app.include_router(user_router)
app.include_router(api_router)

@app.get("/")
def read_root():
    return {"message": "FastAPI backend is running"}

# @app.get("/parse/steam")
# async def parse_steam():
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä Steam, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ JSON.
#     """
#     from src.parsers.steam_parser import SteamParser,main
#     parser = SteamParser()
#     await main()
#     return {"status": "Steam parsed successfully"}
   
# @app.get("/parse/gog")
# async def parse_gog():
#     """
#     –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä GOG, –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –≤ –≤–∏–¥–µ JSON.
#     """
#     from src.parsers.gog_parser import GOGParser, main
#     parser = GOGParser()
#     await main()
#     return {"data": "data"}
    

# @app.get("/parse/nintendo")
# async def parse_nintendo():
#     from src.parsers.nintendo_parser import main
#     await main()
#     return {"status": "Nintendo parsed successfully"}



if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
