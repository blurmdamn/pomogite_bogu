import time
import logging
import asyncio
import re
import json
import csv

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select

from src.config import prod_db_settings
from src.models.product import Product
from src.models.store import Store

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
DATABASE_URL = prod_db_settings.DATABASE_URL
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


def clean_price(price_text: str) -> float:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É: —É–¥–∞–ª—è–µ—Ç –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —á–∏—Å–ª–æ."""
    if not price_text or price_text.lower() in ["free", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]:
        return 0.0
    try:
        cleaned_price = re.sub(r"[^\d,\.]", "", price_text)
        cleaned_price = cleaned_price.replace(" ", "").replace(",", ".")
        return float(cleaned_price)
    except ValueError:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: '{price_text}'")
        return 0.0


class NintendoParser:
    BASE_URL = "https://www.nintendo.com/us/store/games/best-sellers/#sort=df&p={}"

    def __init__(self, headless=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver –¥–ª—è Nintendo Store."""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        self.driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=chrome_options
        )
        self.wait = WebDriverWait(self.driver, 10)
        logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è Nintendo Store –∑–∞–ø—É—â–µ–Ω.")

    def fetch_nintendo_data(self, pages=3):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Nintendo Store —Å –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü."""
        data = []
        for page in range(pages):
            try:
                url = self.BASE_URL.format(page)
                self.driver.get(url)
                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}: {url}")
                time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É

                for i in range(1, 100):  # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å 100 –∏–≥—Ä –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                    try:
                        title_xpath = f'//*[@id="main"]/div[3]/section/div[2]/div[2]/div[{i}]/div/a/div[2]/div/div[1]/h2'
                        price_xpath = f'//*[@id="main"]/div[3]/section/div[2]/div[2]/div[{i}]/div/a/div[2]/div/div[2]/div/div/span'
                        url_xpath = f'//*[@id="main"]/div[3]/section/div[2]/div[2]/div[{i}]/div/a'

                        title_elements = self.driver.find_elements(By.XPATH, title_xpath)
                        price_elements = self.driver.find_elements(By.XPATH, price_xpath)
                        url_elements = self.driver.find_elements(By.XPATH, url_xpath)

                        if title_elements:
                            title = title_elements[0].text.strip()
                            price_text = price_elements[0].text.strip() if price_elements else ""
                            price = clean_price(price_text)
                            game_url = url_elements[0].get_attribute("href") if url_elements else url

                            data.append({"title": title, "price": price, "url": game_url})
                        else:
                            logging.warning(f"‚ö†Ô∏è –ò–≥—Ä–∞ {i} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                    except Exception as ex:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä—ã {i} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {ex}")

            except Exception as ex:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {ex}")
        return data

    def save_to_json(self, data, filename="nintendo_games.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

    def save_to_csv(self, data, filename="nintendo_games.csv"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV."""
        with open(filename, "w", encoding="utf-8", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–°—Å—ã–ª–∫–∞"])
            for game in data:
                writer.writerow([game["title"], game["price"], game["url"]])
        logging.info(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
        self.driver.quit()
        logging.info("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –¥–ª—è Nintendo Store –∑–∞–∫—Ä—ã—Ç.")


async def get_or_create_nintendo_store(session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω 'Nintendo Store' –≤ —Ç–∞–±–ª–∏—Ü–µ Store, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ."""
    result = await session.execute(select(Store).where(Store.name == "Nintendo Store"))
    store = result.scalars().first()
    if not store:
        store = Store(name="Nintendo Store", url="https://www.nintendo.com/us/store/games/best-sellers/")
        session.add(store)
        await session.commit()
        await session.refresh(store)
        logging.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω 'Nintendo Store' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
    else:
        logging.info("‚úÖ –ú–∞–≥–∞–∑–∏–Ω 'Nintendo Store' —É–∂–µ –µ—Å—Ç—å –≤ –ë–î.")
    return store


async def save_games_to_db(games):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy."""
    async with SessionLocal() as session:
        nintendo_store = await get_or_create_nintendo_store(session)
        new_games_count = 0
        updated_games_count = 0

        for game in games:
            existing_game = await session.execute(
                select(Product).where(
                    Product.name == game["title"],
                    Product.store_id == nintendo_store.id
                )
            )
            existing_game = existing_game.scalars().first()

            if existing_game:
                existing_game.price = game["price"]
                existing_game.currency = "USD"
                updated_games_count += 1
            else:
                game_entry = Product(
                    name=game["title"],
                    price=game["price"],
                    currency="USD",
                    url=game["url"],
                    store_id=nintendo_store.id
                )
                session.add(game_entry)
                new_games_count += 1

        await session.commit()
        logging.info(f"‚úÖ {new_games_count} –Ω–æ–≤—ã—Ö –∏–≥—Ä –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î.")
        logging.info(f"‚úÖ {updated_games_count} –æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ Nintendo –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ Nintendo Store...")
    parser = NintendoParser(headless=True)
    try:
        data = parser.fetch_nintendo_data(pages=3)
        if data:
            parser.save_to_json(data)
            parser.save_to_csv(data)
            await save_games_to_db(data)
    except Exception as ex:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞: {ex}")
    finally:
        parser.close()


if __name__ == "__main__":
    asyncio.run(main())
