import time
import random
import logging
import asyncio
import re
import json
import csv

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select

from src.config import prod_db_settings
from src.models.product import Product
from src.models.store import Store

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
DATABASE_URL = prod_db_settings.DATABASE_URL
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


def clean_price(price_text: str) -> float:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É:
      - –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫.
      - –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞.
      - –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É.
      - –ï—Å–ª–∏ —Ü–µ–Ω–∞ 'free' –∏–ª–∏ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0.
    """
    if not price_text or price_text.lower() in ["free", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]:
        return 0.0
    try:
        cleaned_price = re.sub(r"[^\d,\.]", "", price_text)
        cleaned_price = cleaned_price.replace(" ", "")
        cleaned_price = cleaned_price.replace(",", ".")
        return float(cleaned_price)
    except ValueError:
        logging.warning(f"‚ö†Ô∏è Error converting price: '{price_text}'")
        return 0.0


class GOGParser:
    BASE_URL = "https://www.gog.com/ru/games?page={}"

    def __init__(self, headless=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver –¥–ª—è GOG."""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")  # ‚úÖ –ó–∞–ø—É—Å–∫ –±–µ–∑ GUI
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")

        self.driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=chrome_options
        )
        self.wait = WebDriverWait(self.driver, 10)
        logging.info("‚úÖ Browser initialized for GOG.")

    def fetch_gog_data(self, pages=3):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ GOG —Å –∑–∞–¥–∞–Ω–Ω—ã–º —á–∏—Å–ª–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü."""
        data = []
        base_url = self.BASE_URL
        for page in range(1, pages + 1):
            try:
                url = base_url.format(page)
                self.driver.get(url)
                logging.info(f"Fetching page {page}: {url}")
                self.wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="Catalog"]')))

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∏—Ö 50 –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É)
                for i in range(1, 51):
                    try:
                        title_xpath = f'//*[@id="Catalog"]/div/div[2]/paginated-products-grid/div/product-tile[{i}]/a/div[2]/div[1]/product-title/span'
                        price_xpath = f'//*[@id="Catalog"]/div/div[2]/paginated-products-grid/div/product-tile[{i}]/a/div[2]/div[2]/div/product-price/price-value/span'
                        title_elements = self.driver.find_elements(By.XPATH, title_xpath)
                        price_elements = self.driver.find_elements(By.XPATH, price_xpath)
                        if title_elements:
                            title = title_elements[0].text.strip()
                            price_text = price_elements[0].text.strip() if price_elements else ""
                            price = clean_price(price_text)
                            # –ï—Å–ª–∏ —É GOG –Ω–µ—Ç URL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–≥—Ä—ã, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π URL
                            data.append({"title": title, "price": price, "url": url})
                        else:
                            logging.warning(f"Title not found for game {i} on page {page}")
                    except Exception as ex:
                        logging.error(f"Error while fetching data for game {i} on page {page}: {ex}")
            except Exception as ex:
                logging.error(f"Error on page {page}: {ex}")
        return data

    def save_to_json(self, data, filename="gog_games.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ JSON."""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        logging.info(f"üìÅ Data saved to {filename}")

    def save_to_csv(self, data, filename="gog_games.csv"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ CSV."""
        import csv
        with open(filename, "w", encoding="utf-8", newline="") as f:
            writer = csv.writer(f)
            writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞"])
            for game in data:
                writer.writerow([game["title"], game["price"]])
        logging.info(f"üìÅ Data saved to {filename}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
        self.driver.quit()
        logging.info("‚úÖ Browser closed for GOG.")


async def get_or_create_gog_store(session: AsyncSession):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω 'GOG' –≤ —Ç–∞–±–ª–∏—Ü–µ Store, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë—Ç –µ–≥–æ."""
    result = await session.execute(select(Store).where(Store.name == "GOG"))
    store = result.scalars().first()
    if not store:
        store = Store(name="GOG", url="https://www.gog.com/ru/games")
        session.add(store)
        await session.commit()
        await session.refresh(store)
        logging.info("‚úÖ Store 'GOG' added to DB.")
    else:
        logging.info("‚úÖ Store 'GOG' already exists.")
    return store


async def save_games_to_db(games):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy."""
    async with SessionLocal() as session:
        gog_store = await get_or_create_gog_store(session)
        new_games_count = 0
        updated_games_count = 0

        for game in games:
            existing_game = await session.execute(
                select(Product).where(
                    Product.name == game["title"],
                    Product.store_id == gog_store.id
                )
            )
            existing_game = existing_game.scalars().first()

            if existing_game:
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É
                existing_game.price = game["price"]
                existing_game.currency = "USD"  # ‚úÖ –î–ª—è GOG —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                updated_games_count += 1
            else:
                # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                game_entry = Product(
                    name=game["title"],
                    price=game["price"],
                    currency="USD",  # ‚úÖ –î–ª—è GOG —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                    url=game["url"],
                    store_id=gog_store.id
                )
                session.add(game_entry)
                new_games_count += 1

        await session.commit()
        logging.info(f"‚úÖ {new_games_count} new games added to DB.")
        logging.info(f"‚úÖ {updated_games_count} existing games updated in DB.")

async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ GOG –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    logging.info("üöÄ Starting GOG parser...")
    parser = GOGParser(headless=True)
    try:
        data = parser.fetch_gog_data(pages=3)
        if data:
            parser.save_to_json(data)
            parser.save_to_csv(data)
            await save_games_to_db(data)
    except Exception as ex:
        logging.error(f"‚ùå Unexpected error: {ex}")
    finally:
        parser.close()


if __name__ == "__main__":
    asyncio.run(main())
