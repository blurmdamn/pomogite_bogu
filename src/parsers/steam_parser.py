import time
import random
import logging
import asyncio
import re

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select
from sqlalchemy.sql.expression import and_

from src.config import prod_db_settings
from src.models.products import Product
from src.models.stores import Store

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
DATABASE_URL = prod_db_settings.DATABASE_URL
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


class SteamParser:
    BASE_URL = "https://store.steampowered.com/search/?filter=globaltopsellers"

    def __init__(self, headless=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver."""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")  # ‚úÖ –ó–∞–ø—É—Å–∫ –±–µ–∑ GUI
        chrome_options.add_argument("--disable-dev-shm-usage")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Docker/Linux
        chrome_options.add_argument("--no-sandbox")
        self.driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=chrome_options
        )
        logging.info("‚úÖ Browser initialized.")

    def scroll_down(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        last_height = self.driver.execute_script("return document.body.scrollHeight")
        while True:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(2, 4))  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç
            last_height = new_height
        logging.info("‚úÖ Scrolling completed.")

    @staticmethod
    def clean_price(price_text):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É:
         - –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫,
         - –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞,
         - –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É,
         - –ï—Å–ª–∏ —Ü–µ–Ω–∞ 'free' –∏–ª–∏ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0.
        """
        if not price_text or price_text.lower() in ["free", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]:
            return 0.0
        try:
            cleaned_price = re.sub(r"[^\d,\.]", "", price_text)
            cleaned_price = cleaned_price.replace(" ", "").replace(",", ".")
            return float(cleaned_price)
        except ValueError:
            logging.warning(f"‚ö†Ô∏è Error converting price: '{price_text}'")
            return 0.0

    def fetch_steam_data(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Steam."""
        logging.info("üöÄ Opening Steam store page...")
        self.driver.get(self.BASE_URL)
        self.driver.implicitly_wait(10)

        wait = WebDriverWait(self.driver, 15)
        wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="search_resultsRows"]/a[1]')))

        self.scroll_down()

        data = []
        game_elements = self.driver.find_elements(By.XPATH, '//*[@id="search_resultsRows"]/a')
        logging.info(f"üéÆ Found {len(game_elements)} games.")

        for index, game in enumerate(game_elements, start=1):
            time.sleep(3)
            try:
                title = game.find_element(By.XPATH, './/div[2]/div[1]/span').text
            except NoSuchElementException:
                logging.warning(f"‚ö†Ô∏è No title found for game at index {index}. Skipping.")
                continue  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É

            url = game.get_attribute("href")
            try:
                price_text = game.find_element(By.XPATH, './/div[2]/div[4]/div/div/div/div').text.strip()
            except NoSuchElementException:
                logging.warning(f"‚ö†Ô∏è No price found for '{title}', skipping this game.")
                continue  # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            # –ï—Å–ª–∏ –±–ª–æ–∫ —Ü–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            price = self.clean_price(price_text) if price_text else None
            if price is None:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—ã –±–µ–∑ —Ü–µ–Ω—ã

            data.append({"title": title, "price": price, "url": url})
        logging.info("Parsed data: %s", data)
        return data

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
        self.driver.quit()
        logging.info("‚úÖ Browser closed.")


async def get_or_create_steam_store(session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω 'Steam' –≤ —Ç–∞–±–ª–∏—Ü–µ Store, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ.
    """
    result = await session.execute(select(Store).where(Store.name == "Steam"))
    store = result.scalars().first()
    if not store:
        store = Store(name="Steam", url="https://store.steampowered.com/")
        session.add(store)
        await session.commit()
        await session.refresh(store)
        logging.info("‚úÖ Store 'Steam' added to DB.")
    else:
        logging.info("‚úÖ Store 'Steam' already exists.")
    return store


async def save_to_db(data: list):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy."""
    async with SessionLocal() as session:
        store = await get_or_create_steam_store(session)
        new_count = 0
        updated_count = 0
        logging.info("Processing data: ", data)

        for item in data:
            price = float(item["price"])  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ clean_price —É–∂–µ –≤—Å—ë –æ–±—Ä–∞–±–æ—Ç–∞–ª

            res = await session.execute(
                select(Product).where(
                    and_(
                        Product.name == item["title"],
                        Product.store_id == store.id
                    )
                )
            )
            product = res.scalars().first()
            if product:
                product.price = price
                updated_count += 1
            else:
                new_product = Product(
                    name=item["title"],
                    price=price,
                    url=item["url"],
                    store_id=store.id
                )
                session.add(new_product)
                new_count += 1

        logging.info("Ready to commit. New: %d, Updated: %d", new_count, updated_count)
        await session.commit()
        logging.info("Database commit successful.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    logging.info("üöÄ Starting parser...")
    parser = SteamParser(headless=True)
    data = parser.fetch_steam_data()
    print("‚úÖ Parsed data:", data)
    if data:
        await save_to_db(data)
    else:
        logging.warning("No data parsed from Steam Store.")
    parser.close()

