import time
import random
import logging
import asyncio
import re

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException, TimeoutException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker
from sqlalchemy.future import select

from src.config import prod_db_settings
from src.models.products import Product
from src.models.stores import Store

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
DATABASE_URL = prod_db_settings.DATABASE_URL
engine = create_async_engine(DATABASE_URL, echo=False)
SessionLocal = sessionmaker(bind=engine, class_=AsyncSession, expire_on_commit=False)


class SteamParser:
    BASE_URL = "https://store.steampowered.com/search/?filter=globaltopsellers"

    def __init__(self, headless=True):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Selenium WebDriver."""
        chrome_options = Options()
        if headless:
            chrome_options.add_argument("--headless")  # ‚úÖ –ó–∞–ø—É—Å–∫ –±–µ–∑ GUI
        chrome_options.add_argument("--disable-dev-shm-usage")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Docker/Linux
        chrome_options.add_argument("--no-sandbox")

        self.driver = webdriver.Chrome(
            service=Service(ChromeDriverManager().install()),
            options=chrome_options
        )
        logging.info("‚úÖ Browser initialized.")

    def scroll_down(self):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–Ω–∏–∑ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤."""
        last_height = self.driver.execute_script("return document.body.scrollHeight")
        while True:
            self.driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(2, 4))  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
            new_height = self.driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break  # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            last_height = new_height
        logging.info("‚úÖ Scrolling completed.")

    @staticmethod
    def clean_price(price_text):
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–Ω—É: 
         - –£–±–∏—Ä–∞–µ—Ç –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –∑–∞–ø—è—Ç—ã—Ö –∏ —Ç–æ—á–µ–∫,
         - –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ —á–∏—Å–ª–∞,
         - –ó–∞–º–µ–Ω—è–µ—Ç –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É,
         - –ï—Å–ª–∏ —Ü–µ–Ω–∞ 'free' –∏–ª–∏ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0.0.
        """
        if not price_text or price_text.lower() in ["free", "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"]:
            return 0.0
        try:
            cleaned_price = re.sub(r"[^\d,\.]", "", price_text)
            cleaned_price = cleaned_price.replace(" ", "")
            cleaned_price = cleaned_price.replace(",", ".")
            return float(cleaned_price)
        except ValueError:
            logging.warning(f"‚ö†Ô∏è Error converting price: '{price_text}'")
            return 0.0

    def fetch_steam_data(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞ Steam."""
        try:
            self.driver.get(self.BASE_URL)
            self.driver.implicitly_wait(10)

            # –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏–≥—Ä—ã
            wait = WebDriverWait(self.driver, 15)
            wait.until(EC.presence_of_element_located((By.XPATH, '//*[@id="search_resultsRows"]/a[1]')))

            self.scroll_down()

            data = []
            game_elements = self.driver.find_elements(By.XPATH, '//*[@id="search_resultsRows"]/a')
            logging.info(f"üéÆ Found {len(game_elements)} games.")

            for index, game in enumerate(game_elements, start=1):
                try:
                    title = game.find_element(By.XPATH, './/div[2]/div[1]/span').text
                    url = game.get_attribute("href")
                    try:
                        price_text = game.find_element(By.XPATH, './/div[2]/div[4]/div/div/div/div').text.strip()
                    except NoSuchElementException:
                        price_text = ""
                    price = self.clean_price(price_text)
                    data.append({"title": title, "price": price, "url": url})
                except Exception as ex:
                    logging.warning(f"‚ö†Ô∏è Error while fetching data for game {index}: {ex}")

            return data
        except TimeoutException:
            logging.error("‚ùå Page load timed out. No data retrieved.")
            return []

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞."""
        self.driver.quit()
        logging.info("‚úÖ Browser closed.")


async def get_or_create_steam_store(session: AsyncSession):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –º–∞–≥–∞–∑–∏–Ω 'Steam' –≤ —Ç–∞–±–ª–∏—Ü–µ Store, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ.
    """
    result = await session.execute(select(Store).where(Store.name == "Steam"))
    store = result.scalars().first()
    if not store:
        store = Store(name="Steam", url="https://store.steampowered.com/")
        session.add(store)
        await session.commit()
        await session.refresh(store)
        logging.info("‚úÖ Store 'Steam' added to DB.")
    else:
        logging.info("‚úÖ Store 'Steam' already exists.")
    return store


async def save_games_to_db(games):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä –≤ PostgreSQL —á–µ—Ä–µ–∑ SQLAlchemy."""
    async with SessionLocal() as session:
        steam_store = await get_or_create_steam_store(session)
        new_games_count = 0
        updated_games_count = 0

        for game in games:
            existing_game = await session.execute(
                select(Product).where(
                    Product.name == game["title"],
                    Product.store_id == steam_store.id
                )
            )
            existing_game = existing_game.scalars().first()

            if existing_game:
                # –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –µ—Å—Ç—å, –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –∏ –≤–∞–ª—é—Ç—É
                existing_game.price = game["price"]
                existing_game.currency = "KZT"  # ‚úÖ –î–ª—è Steam —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                updated_games_count += 1
            else:
                # –ï—Å–ª–∏ –∏–≥—Ä—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                game_entry = Product(
                    name=game["title"],
                    price=game["price"],
                    currency="KZT",  # ‚úÖ –î–ª—è Steam —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –≤–∞–ª—é—Ç—É
                    url=game["url"],
                    store_id=steam_store.id  # –°–≤—è–∑—ã–≤–∞–µ–º –∏–≥—Ä—É —Å –º–∞–≥–∞–∑–∏–Ω–æ–º
                )
                session.add(game_entry)
                new_games_count += 1

        await session.commit()
        logging.info(f"‚úÖ {new_games_count} new games added to DB.")
        logging.info(f"‚úÖ {updated_games_count} existing games updated in DB.")


async def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
    logging.info("üöÄ Starting parser...")
    parser = SteamParser(headless=True)
    try:
        data = parser.fetch_steam_data()
        if data:
            await save_games_to_db(data)
    except Exception as ex:
        logging.error(f"‚ùå Unexpected error: {ex}")
    finally:
        parser.close()


if __name__ == "__main__":
    asyncio.run(main())
