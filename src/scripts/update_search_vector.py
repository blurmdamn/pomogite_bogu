import asyncio
import logging

from sqlalchemy import select, update, func
from src.database import async_session_maker
from src.models.products import Product
from src.models.stores import Store

logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


async def update_search_vector():
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞–≥–∞–∑–∏–Ω—ã
        steam_store = await session.scalar(select(Store).where(Store.name == "Steam"))
        gog_store = await session.scalar(select(Store).where(Store.name == "GOG"))

        if not steam_store or not gog_store:
            logging.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–∞–≥–∞–∑–∏–Ω—ã Steam –∏–ª–∏ GOG –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è Steam (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä—É—Å—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä)
        await session.execute(
            update(Product)
            .where(Product.store_id == steam_store.id)
            .values(
                search_vector=func.to_tsvector("russian", Product.description)
            )
        )
        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã Steam search_vector")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è GOG (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä)
        await session.execute(
            update(Product)
            .where(Product.store_id == gog_store.id)
            .values(
                search_vector=func.to_tsvector("english", Product.description)
            )
        )
        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã GOG search_vector")

        await session.commit()
        logging.info("üéâ –ö–æ–º–º–∏—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    asyncio.run(update_search_vector())
